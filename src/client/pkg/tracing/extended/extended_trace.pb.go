// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pkg/tracing/extended/extended_trace.proto

package extended

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/src/client/pfs"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TraceProto contains information identifying a Jaeger trace. It's used to
// propagate traces that follow the lifetime of a long operation (e.g. creating
// a pipeline or running a job), and which live longer than any single RPC.
type TraceProto struct {
	// branch specifies a target branch of this trace; this would be set for a
	// trace created by 'pachctl finish-commit' (or some other call that would
	// spawn jobs) and if that new commit spawns a downstream commit in 'branch',
	// then this trace will cover RPCs util that downstream commit is finished
	Branch *pfs.Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// pipeline specifies the target pipeline of this trace; this would be set for
	// a trace created by 'pachctl create-pipeline' or 'pachctl update-pipeline'
	// and would include the kubernetes RPCs involved in creating a pipeline
	Pipeline string `protobuf:"bytes,4,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// commit_ids are the new commits on which this trace's target commit is
	// provenant (which will be covered by this trace)
	CommitIDs []string `protobuf:"bytes,3,rep,name=commit_ids,json=commitIds,proto3" json:"commit_ids,omitempty"`
	// serialized_trace contains the info identifying a trace in Jaeger (a
	// (trace ID, span ID, sampled) tuple, basically)
	SerializedTrace      map[string]string `protobuf:"bytes,2,rep,name=serialized_trace,json=serializedTrace,proto3" json:"serialized_trace,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TraceProto) Reset()         { *m = TraceProto{} }
func (m *TraceProto) String() string { return proto.CompactTextString(m) }
func (*TraceProto) ProtoMessage()    {}
func (*TraceProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d6b46ba46523418, []int{0}
}
func (m *TraceProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceProto.Merge(m, src)
}
func (m *TraceProto) XXX_Size() int {
	return m.Size()
}
func (m *TraceProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceProto.DiscardUnknown(m)
}

var xxx_messageInfo_TraceProto proto.InternalMessageInfo

func (m *TraceProto) GetBranch() *pfs.Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *TraceProto) GetPipeline() string {
	if m != nil {
		return m.Pipeline
	}
	return ""
}

func (m *TraceProto) GetCommitIDs() []string {
	if m != nil {
		return m.CommitIDs
	}
	return nil
}

func (m *TraceProto) GetSerializedTrace() map[string]string {
	if m != nil {
		return m.SerializedTrace
	}
	return nil
}

func init() {
	proto.RegisterType((*TraceProto)(nil), "extended.TraceProto")
	proto.RegisterMapType((map[string]string)(nil), "extended.TraceProto.SerializedTraceEntry")
}

func init() {
	proto.RegisterFile("client/pkg/tracing/extended/extended_trace.proto", fileDescriptor_8d6b46ba46523418)
}

var fileDescriptor_8d6b46ba46523418 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0xcd, 0xaa, 0x63, 0xcd, 0x10, 0x47, 0xe9, 0xa1, 0xf4, 0x50, 0x8b, 0x5e, 0x2a, 0x48,
	0x23, 0xf3, 0x22, 0x1e, 0x3c, 0x54, 0x3d, 0xec, 0x36, 0xea, 0x4e, 0x5e, 0x46, 0x97, 0xc6, 0x2e,
	0xac, 0x4b, 0x4a, 0x92, 0x89, 0xf3, 0x3d, 0x04, 0x1f, 0xc9, 0xa3, 0x4f, 0x20, 0x52, 0x5f, 0x44,
	0x92, 0xda, 0xa9, 0x20, 0x1e, 0x02, 0xff, 0xef, 0xf7, 0x7d, 0xf9, 0x27, 0xff, 0x04, 0x9e, 0xe0,
	0x92, 0x12, 0xa6, 0x50, 0xb5, 0x28, 0x90, 0x12, 0x19, 0xa6, 0xac, 0x40, 0xe4, 0x41, 0x11, 0x96,
	0x93, 0x7c, 0x23, 0xa6, 0xba, 0x43, 0xe2, 0x4a, 0x70, 0xc5, 0x9d, 0x5e, 0x4b, 0x7d, 0xb7, 0xdd,
	0x7b, 0x27, 0xf5, 0x6a, 0xfa, 0xbe, 0x5b, 0xf0, 0x82, 0x1b, 0x89, 0xb4, 0x6a, 0xe8, 0xc1, 0x53,
	0x07, 0xc2, 0x89, 0x76, 0x19, 0x1b, 0x93, 0x43, 0xd8, 0x9d, 0x89, 0x8c, 0xe1, 0xb9, 0x07, 0x42,
	0x10, 0xf5, 0x87, 0xfd, 0x58, 0x1b, 0x24, 0x06, 0xa5, 0x5f, 0x2d, 0xc7, 0x87, 0xbd, 0x8a, 0x56,
	0xa4, 0xa4, 0x8c, 0x78, 0xdb, 0x21, 0x88, 0xec, 0x74, 0x53, 0x3b, 0xc7, 0x10, 0x62, 0xbe, 0x5c,
	0x52, 0x35, 0xa5, 0xb9, 0xf4, 0xac, 0xd0, 0x8a, 0xec, 0x64, 0xb7, 0x7e, 0xdb, 0xb7, 0x2f, 0x0d,
	0x1d, 0x5d, 0xc9, 0xd4, 0x6e, 0x06, 0x46, 0xb9, 0x74, 0x26, 0x70, 0x20, 0x89, 0xa0, 0x59, 0x49,
	0x1f, 0xdb, 0x34, 0x5e, 0x27, 0xb4, 0xa2, 0xfe, 0xf0, 0x28, 0x6e, 0xe3, 0xc4, 0xdf, 0xd7, 0x8b,
	0x6f, 0x36, 0xc3, 0x06, 0x5e, 0x33, 0x25, 0xd6, 0xe9, 0x9e, 0xfc, 0x4d, 0xfd, 0x04, 0xba, 0x7f,
	0x0d, 0x3a, 0x03, 0x68, 0x2d, 0xc8, 0xda, 0x24, 0xb3, 0x53, 0x2d, 0x1d, 0x17, 0xee, 0xdc, 0x67,
	0xe5, 0x4a, 0x1f, 0xaa, 0x59, 0x53, 0x9c, 0x77, 0xce, 0x40, 0x32, 0x7e, 0xa9, 0x03, 0xf0, 0x5a,
	0x07, 0xe0, 0xbd, 0x0e, 0xc0, 0xf3, 0x47, 0xb0, 0x75, 0x7b, 0x51, 0x50, 0x35, 0x5f, 0xcd, 0x62,
	0xcc, 0x97, 0xa8, 0xca, 0xf0, 0x7c, 0x9d, 0x13, 0xf1, 0x53, 0x49, 0x81, 0xd1, 0x3f, 0x9f, 0x36,
	0xeb, 0x9a, 0x07, 0x3f, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x55, 0x66, 0xef, 0x5b, 0xda, 0x01,
	0x00, 0x00,
}

func (m *TraceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Branch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExtendedTrace(dAtA, i, uint64(m.Branch.Size()))
		n1, err1 := m.Branch.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.SerializedTrace) > 0 {
		for k, _ := range m.SerializedTrace {
			dAtA[i] = 0x12
			i++
			v := m.SerializedTrace[k]
			mapSize := 1 + len(k) + sovExtendedTrace(uint64(len(k))) + 1 + len(v) + sovExtendedTrace(uint64(len(v)))
			i = encodeVarintExtendedTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintExtendedTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintExtendedTrace(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.CommitIDs) > 0 {
		for _, s := range m.CommitIDs {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Pipeline) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExtendedTrace(dAtA, i, uint64(len(m.Pipeline)))
		i += copy(dAtA[i:], m.Pipeline)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExtendedTrace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovExtendedTrace(uint64(l))
	}
	if len(m.SerializedTrace) > 0 {
		for k, v := range m.SerializedTrace {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovExtendedTrace(uint64(len(k))) + 1 + len(v) + sovExtendedTrace(uint64(len(v)))
			n += mapEntrySize + 1 + sovExtendedTrace(uint64(mapEntrySize))
		}
	}
	if len(m.CommitIDs) > 0 {
		for _, s := range m.CommitIDs {
			l = len(s)
			n += 1 + l + sovExtendedTrace(uint64(l))
		}
	}
	l = len(m.Pipeline)
	if l > 0 {
		n += 1 + l + sovExtendedTrace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExtendedTrace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExtendedTrace(x uint64) (n int) {
	return sovExtendedTrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Branch == nil {
				m.Branch = &pfs.Branch{}
			}
			if err := m.Branch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SerializedTrace == nil {
				m.SerializedTrace = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExtendedTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtendedTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExtendedTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExtendedTrace
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExtendedTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthExtendedTrace
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthExtendedTrace
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExtendedTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthExtendedTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SerializedTrace[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitIDs = append(m.CommitIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipeline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExtendedTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtendedTrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtendedTrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtendedTrace
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthExtendedTrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExtendedTrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExtendedTrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthExtendedTrace
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExtendedTrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtendedTrace   = fmt.Errorf("proto: integer overflow")
)
