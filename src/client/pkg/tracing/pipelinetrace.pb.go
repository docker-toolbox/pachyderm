// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pps/pipelinetrace.proto

package tracing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/src/client/pfs"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TraceInfo contains information identifying a Jaeger trace. It's used to
// propagate "Super Traces"â€”traces that live longer than any single RPC.
// Currently, there are two kinds of Super Traces:
// - CreatePipeline traces, which start with 'pachctl create-pipeline' and end
//   when the created pipeline is in the "running" state (or when any errors are
//   encountered)
// - FinishCommit traces, which start with 'pachctl finish-commit' (or the end
//   of a one-off 'pachctl put-file' command) and ends when the target pipeline
//   (or last pipeline to process the newly-created commit) finishes the output
//   commit generated by this input commit
type TraceInfo struct {
	// value contains the info identifying a trace in Jaeger (a
	// (trace ID, span ID, sampled) tuple, basically)
	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// tags are identifiers with which this trace be retrieves from etcd. In the
	// case of a CreatePipeline trace, this would have one value: the name of the
	// pipeline. In the case of a FinishCommit trace, we'd have one tag for each
	// output commit that we want to track.
	//
	// This field has to be at the top-level of TraceInfo so we can index off of
	// it in the 'traces' collection, but because it's ambiguous and may not be
	// populated when the TraceInfo is collected, we store the information needed
	// to populate it in the various <operation>_opts fields below.
	Tags                  []string                           `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatePipelineOpts    *TraceInfo_CreatePipelineTraceOpts `protobuf:"bytes,3,opt,name=create_pipeline_opts,json=createPipelineOpts,proto3" json:"create_pipeline_opts,omitempty"`
	FinishCommitTraceOpts *TraceInfo_FinishCommitTraceOpts   `protobuf:"bytes,4,opt,name=finish_commit_trace_opts,json=finishCommitTraceOpts,proto3" json:"finish_commit_trace_opts,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                           `json:"-"`
	XXX_unrecognized      []byte                             `json:"-"`
	XXX_sizecache         int32                              `json:"-"`
}

func (m *TraceInfo) Reset()         { *m = TraceInfo{} }
func (m *TraceInfo) String() string { return proto.CompactTextString(m) }
func (*TraceInfo) ProtoMessage()    {}
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4ba42ef40ce543e, []int{0}
}
func (m *TraceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceInfo.Merge(m, src)
}
func (m *TraceInfo) XXX_Size() int {
	return m.Size()
}
func (m *TraceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TraceInfo proto.InternalMessageInfo

func (m *TraceInfo) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TraceInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TraceInfo) GetCreatePipelineOpts() *TraceInfo_CreatePipelineTraceOpts {
	if m != nil {
		return m.CreatePipelineOpts
	}
	return nil
}

func (m *TraceInfo) GetFinishCommitTraceOpts() *TraceInfo_FinishCommitTraceOpts {
	if m != nil {
		return m.FinishCommitTraceOpts
	}
	return nil
}

// CreatePipelineTraceOpts contains the options needed to crate a
// CreatePipeline Super Trace.
type TraceInfo_CreatePipelineTraceOpts struct {
	// pipeline is the name of the pipeline that the 'pachctl create-pipeline'
	// request responsible for this trace created
	Pipeline             string   `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraceInfo_CreatePipelineTraceOpts) Reset()         { *m = TraceInfo_CreatePipelineTraceOpts{} }
func (m *TraceInfo_CreatePipelineTraceOpts) String() string { return proto.CompactTextString(m) }
func (*TraceInfo_CreatePipelineTraceOpts) ProtoMessage()    {}
func (*TraceInfo_CreatePipelineTraceOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4ba42ef40ce543e, []int{0, 1}
}
func (m *TraceInfo_CreatePipelineTraceOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceInfo_CreatePipelineTraceOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceInfo_CreatePipelineTraceOpts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceInfo_CreatePipelineTraceOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceInfo_CreatePipelineTraceOpts.Merge(m, src)
}
func (m *TraceInfo_CreatePipelineTraceOpts) XXX_Size() int {
	return m.Size()
}
func (m *TraceInfo_CreatePipelineTraceOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceInfo_CreatePipelineTraceOpts.DiscardUnknown(m)
}

var xxx_messageInfo_TraceInfo_CreatePipelineTraceOpts proto.InternalMessageInfo

func (m *TraceInfo_CreatePipelineTraceOpts) GetPipeline() string {
	if m != nil {
		return m.Pipeline
	}
	return ""
}

// FinishCommitTraceOpts contains the options needed to crate a
// FinishCommit Super Trace.
type TraceInfo_FinishCommitTraceOpts struct {
	// branch specifies the final output branch that the 'pachctl finish-commit'
	// trace should last until (if empty, pachctl will use the downstream branch
	// with the longest provenance)
	Branch               *pfs.Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TraceInfo_FinishCommitTraceOpts) Reset()         { *m = TraceInfo_FinishCommitTraceOpts{} }
func (m *TraceInfo_FinishCommitTraceOpts) String() string { return proto.CompactTextString(m) }
func (*TraceInfo_FinishCommitTraceOpts) ProtoMessage()    {}
func (*TraceInfo_FinishCommitTraceOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4ba42ef40ce543e, []int{0, 2}
}
func (m *TraceInfo_FinishCommitTraceOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceInfo_FinishCommitTraceOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceInfo_FinishCommitTraceOpts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraceInfo_FinishCommitTraceOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceInfo_FinishCommitTraceOpts.Merge(m, src)
}
func (m *TraceInfo_FinishCommitTraceOpts) XXX_Size() int {
	return m.Size()
}
func (m *TraceInfo_FinishCommitTraceOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceInfo_FinishCommitTraceOpts.DiscardUnknown(m)
}

var xxx_messageInfo_TraceInfo_FinishCommitTraceOpts proto.InternalMessageInfo

func (m *TraceInfo_FinishCommitTraceOpts) GetBranch() *pfs.Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func init() {
	proto.RegisterType((*TraceInfo)(nil), "tracing.TraceInfo")
	proto.RegisterMapType((map[string]string)(nil), "tracing.TraceInfo.ValueEntry")
	proto.RegisterType((*TraceInfo_CreatePipelineTraceOpts)(nil), "tracing.TraceInfo.CreatePipelineTraceOpts")
	proto.RegisterType((*TraceInfo_FinishCommitTraceOpts)(nil), "tracing.TraceInfo.FinishCommitTraceOpts")
}

func init() { proto.RegisterFile("client/pps/pipelinetrace.proto", fileDescriptor_b4ba42ef40ce543e) }

var fileDescriptor_b4ba42ef40ce543e = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0x37, 0xeb, 0x9c, 0x2e, 0xbd, 0x48, 0xd8, 0xb0, 0x14, 0x2c, 0x45, 0x2f, 0xc5, 0x43, 0x0b,
	0x1b, 0x83, 0x21, 0x9e, 0x36, 0x54, 0x3c, 0x29, 0x45, 0x3c, 0x88, 0x50, 0xba, 0x98, 0xb6, 0x61,
	0x5b, 0x1b, 0x92, 0x4c, 0xd8, 0x37, 0xf1, 0x03, 0x79, 0xf0, 0xe8, 0x47, 0x90, 0xf9, 0x45, 0x24,
	0x69, 0xbb, 0x29, 0xd4, 0x43, 0xe1, 0xbd, 0xdf, 0x9f, 0xf7, 0xf2, 0x5e, 0x1f, 0x74, 0xf0, 0x82,
	0x92, 0x5c, 0x06, 0x8c, 0x89, 0x80, 0x51, 0x46, 0x16, 0x34, 0x27, 0x92, 0xc7, 0x98, 0xf8, 0x8c,
	0x17, 0xb2, 0x40, 0x07, 0x2a, 0xa1, 0x79, 0x6a, 0xf7, 0x6a, 0x61, 0x22, 0xd4, 0x57, 0xd2, 0xa7,
	0xef, 0x06, 0xec, 0x3e, 0x28, 0xf9, 0x6d, 0x9e, 0x14, 0x68, 0x08, 0xf7, 0x5f, 0xe3, 0xc5, 0x8a,
	0x58, 0xc0, 0x35, 0x3c, 0x73, 0x70, 0xe2, 0x57, 0x66, 0x7f, 0x2b, 0xf1, 0x1f, 0x15, 0x7f, 0x95,
	0x4b, 0xbe, 0x0e, 0x4b, 0x2d, 0x42, 0xb0, 0x2d, 0xe3, 0x54, 0x58, 0x2d, 0xd7, 0xf0, 0xba, 0xa1,
	0x8e, 0xd1, 0x33, 0xec, 0x61, 0x4e, 0x62, 0x49, 0xa2, 0xfa, 0x4d, 0x51, 0xc1, 0xa4, 0xb0, 0x0c,
	0x17, 0x78, 0xe6, 0xe0, 0xbc, 0xa1, 0xee, 0x54, 0xcb, 0xef, 0x2b, 0xb5, 0xc6, 0xef, 0x98, 0x14,
	0x21, 0xc2, 0x7f, 0x08, 0x85, 0xa1, 0x18, 0x5a, 0x09, 0xcd, 0xa9, 0xc8, 0x22, 0x5c, 0x2c, 0x97,
	0x54, 0x46, 0x7a, 0xe0, 0xb2, 0x43, 0x5b, 0x77, 0xf0, 0x1a, 0x3a, 0x5c, 0x6b, 0xcb, 0x54, 0x3b,
	0x76, 0xf5, 0xfb, 0x49, 0x13, 0x6c, 0x8f, 0x21, 0xdc, 0x4d, 0x8a, 0x8e, 0xa0, 0x31, 0x27, 0x6b,
	0x0b, 0xb8, 0xc0, 0xeb, 0x86, 0x2a, 0x44, 0xbd, 0x7a, 0x53, 0x2d, 0x8d, 0x95, 0xc9, 0x45, 0x6b,
	0x0c, 0xec, 0x11, 0x3c, 0xfe, 0x67, 0x16, 0x64, 0xc3, 0xc3, 0x7a, 0x1d, 0x55, 0xad, 0x6d, 0x6e,
	0x5f, 0xc2, 0x7e, 0xe3, 0x03, 0xd1, 0x19, 0xec, 0xcc, 0x78, 0x9c, 0xe3, 0x4c, 0x5b, 0xcc, 0x81,
	0xe9, 0xab, 0xbf, 0x37, 0xd1, 0x50, 0x58, 0x51, 0x93, 0x9b, 0x8f, 0x8d, 0x03, 0x3e, 0x37, 0x0e,
	0xf8, 0xda, 0x38, 0xe0, 0xed, 0xdb, 0xd9, 0x7b, 0x1a, 0xa5, 0x54, 0x66, 0xab, 0x99, 0x8f, 0x8b,
	0x65, 0xc0, 0x62, 0x9c, 0xad, 0x5f, 0x08, 0xff, 0x1d, 0x09, 0x8e, 0x83, 0xfa, 0x22, 0xe6, 0x69,
	0x50, 0xad, 0x6b, 0xd6, 0xd1, 0x67, 0x31, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x07, 0xa3, 0x8c,
	0xce, 0x57, 0x02, 0x00, 0x00,
}

func (m *TraceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for k, _ := range m.Value {
			dAtA[i] = 0xa
			i++
			v := m.Value[k]
			mapSize := 1 + len(k) + sovPipelinetrace(uint64(len(k))) + 1 + len(v) + sovPipelinetrace(uint64(len(v)))
			i = encodeVarintPipelinetrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPipelinetrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPipelinetrace(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CreatePipelineOpts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPipelinetrace(dAtA, i, uint64(m.CreatePipelineOpts.Size()))
		n1, err := m.CreatePipelineOpts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FinishCommitTraceOpts != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPipelinetrace(dAtA, i, uint64(m.FinishCommitTraceOpts.Size()))
		n2, err := m.FinishCommitTraceOpts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TraceInfo_CreatePipelineTraceOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceInfo_CreatePipelineTraceOpts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pipeline) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelinetrace(dAtA, i, uint64(len(m.Pipeline)))
		i += copy(dAtA[i:], m.Pipeline)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TraceInfo_FinishCommitTraceOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceInfo_FinishCommitTraceOpts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Branch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPipelinetrace(dAtA, i, uint64(m.Branch.Size()))
		n3, err := m.Branch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPipelinetrace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for k, v := range m.Value {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelinetrace(uint64(len(k))) + 1 + len(v) + sovPipelinetrace(uint64(len(v)))
			n += mapEntrySize + 1 + sovPipelinetrace(uint64(mapEntrySize))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovPipelinetrace(uint64(l))
		}
	}
	if m.CreatePipelineOpts != nil {
		l = m.CreatePipelineOpts.Size()
		n += 1 + l + sovPipelinetrace(uint64(l))
	}
	if m.FinishCommitTraceOpts != nil {
		l = m.FinishCommitTraceOpts.Size()
		n += 1 + l + sovPipelinetrace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TraceInfo_CreatePipelineTraceOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pipeline)
	if l > 0 {
		n += 1 + l + sovPipelinetrace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TraceInfo_FinishCommitTraceOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovPipelinetrace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPipelinetrace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPipelinetrace(x uint64) (n int) {
	return sovPipelinetrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelinetrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelinetrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelinetrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelinetrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelinetrace
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelinetrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPipelinetrace
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPipelinetrace
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelinetrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPipelinetrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Value[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePipelineOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatePipelineOpts == nil {
				m.CreatePipelineOpts = &TraceInfo_CreatePipelineTraceOpts{}
			}
			if err := m.CreatePipelineOpts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishCommitTraceOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishCommitTraceOpts == nil {
				m.FinishCommitTraceOpts = &TraceInfo_FinishCommitTraceOpts{}
			}
			if err := m.FinishCommitTraceOpts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelinetrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceInfo_CreatePipelineTraceOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelinetrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePipelineTraceOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePipelineTraceOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipeline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelinetrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceInfo_FinishCommitTraceOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelinetrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishCommitTraceOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishCommitTraceOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Branch == nil {
				m.Branch = &pfs.Branch{}
			}
			if err := m.Branch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelinetrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipelinetrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipelinetrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipelinetrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelinetrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipelinetrace
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPipelinetrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPipelinetrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPipelinetrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPipelinetrace
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPipelinetrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipelinetrace   = fmt.Errorf("proto: integer overflow")
)
